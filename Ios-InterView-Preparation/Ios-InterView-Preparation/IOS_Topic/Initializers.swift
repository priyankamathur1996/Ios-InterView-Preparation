//
//  Initializers.swift
//  Ios-InterView-Preparation
//
//  Created by Priyanka Mathur on 31/08/24.
//

import Foundation
/*
Here are the types of initializers in Swift, along with examples:

1. Designated Initializers

Primary initializers for a class, responsible for setting up all properties.


class Person {
    var name: String
    var age: Int

    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}


1. Convenience Initializers

Secondary initializers that call a designated initializer to set up the object.


class Person {
    var name: String
    var age: Int

    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }

    convenience init(name: String) {
        self.init(name: name, age: 0)
    }
}


1. Required Initializers

Initializers that must be implemented by subclasses.


class Vehicle {
    required init() {
        // Implementation
    }
}

class Car: Vehicle {
    required init() {
        // Implementation
    }
}


1. Failable Initializers

Initializers that can fail and return nil if initialization fails.


class Person {
    var name: String
    var age: Int

    init?(name: String, age: Int) {
        guard age >= 0 else { return nil }
        self.name = name
        self.age = age
    }
}


1. Fallback Initializers

Initializers that provide default values for properties.


class Person {
    var name: String
    var age: Int

    init(name: String = "Unknown", age: Int = 0) {
        self.name = name
        self.age = age
    }
}


1. Memberwise Initializers

Automatic initializers generated by the compiler for structs.


struct Person {
    var name: String
    var age: Int
}

let person = Person(name: "John", age: 30)


1. Default Initializers

Initializers that provide default values for all properties.


class Person {
    var name: String = "Unknown"
    var age: Int = 0

    init() {}
}


1. Copy Initializers

Initializers that create a copy of an existing object.


class Person {
    var name: String
    var age: Int

    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }

    init(_ person: Person) {
        self.name = person.name
        self.age = person.age
    }
}


1. Inherited Initializers

Initializers that are inherited from a superclass.


class Vehicle {
    init() {}
}

class Car: Vehicle {
    // Inherits the initializer from Vehicle
}


1. Protocol Initializers

Initializers that are required by a protocol.


protocol PersonProtocol {
    init(name: String, age: Int)
}

class Person: PersonProtocol {
    var name: String
    var age: Int

    required init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}


Each type of initializer serves a specific purpose and helps ensure that objects are properly initialized and configured.
*/
